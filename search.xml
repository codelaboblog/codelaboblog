<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Giới thiệu về Set trong Javascript</title>
      <link href="/2018/09/10/gioi-thieu-ve-set-trong-javascript/"/>
      <url>/2018/09/10/gioi-thieu-ve-set-trong-javascript/</url>
      <content type="html"><![CDATA[<blockquote><p>Set là một kiểu object mới trong ES6 (ES2015), dùng để lưu trữ các giá trị không trùng lặp. Set có thể chứa bất kì kiểu giá trị nào, gồm các giá trị <em>primitive</em> (string, number, boolean, null, undefined, symbol) hay thậm chí là object literal hoặc array.</p></blockquote><p>Sau đây là ví dụ về một set đơn giản với một số phương thức của set như <code>add</code>, <code>size</code>, <code>has</code>, <code>forEach</code>, <code>delete</code> và <code>clear</code>:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> animals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animals<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'🐱'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animals<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'🐶'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animals<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'🐔'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animals<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'🐷'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animals<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*4*/</span>animals<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'🐶'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animals<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*4*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animals<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'🐷'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*true*/</span>animals<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'🐷'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animals<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'🐷'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*false*/</span>animals<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>animal <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Hey </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>animal<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*Hey 🐱!Hey 🐶!Hey 🐔!Hey 🐷!*/</span>animals<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animals<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*0*/</span></code></pre><p>Dưới đây tiếp tục là một ví dụ khác về set. Ở đây, chúng ta truyền vào một array để khởi tạo set. Hãy chú ý vào array đầu tiên: do chứa các giá trị trùng lặp nên không được giữ nguyên kiểu array mà đã bị tách thành 2 giá trị không trùng lặp. Array tiếp theo do chứa các giá trị không trùng lặp nên vẫn được giữ nguyên kiểu array.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> myAnimals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'🐷'</span><span class="token punctuation">,</span> <span class="token string">'🐢'</span><span class="token punctuation">,</span> <span class="token string">'🐷'</span><span class="token punctuation">,</span> <span class="token string">'🐷'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myAnimals<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'🐨'</span><span class="token punctuation">,</span> <span class="token string">'🐑'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myAnimals<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Rud'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">'🐢'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myAnimals<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*4*/</span>myAnimals<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>animal <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*🐷🐢["🐨", "🐑"]Object { name: "Rud", type: "🐢" }*/</span></code></pre><p>String là kiểu iterable nên cũng có thể truyền vào để khởi tạo set.</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Trong set này chỉ gồm những kí tự khác nhau'</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*43*/</span><span class="token keyword">let</span> sentence <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token string">'Trong set này chỉ gồm những kí tự khác nhau'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sentence<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*23*/</span></code></pre><p>Trong những ví dụ trên, chúng ta đã sử dụng <code>forEach</code> để duyệt qua các giá trị trong set. Ngoài ra, chúng ta cũng có thể sử dụng <code>for...of</code>.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> moreAnimals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'🐘 '</span><span class="token punctuation">,</span> <span class="token string">'🐴'</span><span class="token punctuation">,</span> <span class="token string">'🐕'</span><span class="token punctuation">,</span> <span class="token string">'🐇'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> animal <span class="token keyword">of</span> moreAnimals<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Hi </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> animal <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*Hi 🐘Hi 🐴Hi 🐕Hi 🐇*/</span></code></pre><p>Set còn có phương thức <code>keys</code> và <code>values</code>, và hai phương thức này đều trả về một SetIterator chứa các giá trị trong set.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> garden <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'🌷'</span><span class="token punctuation">,</span> <span class="token string">'🌹'</span><span class="token punctuation">,</span> <span class="token string">'🌻'</span><span class="token punctuation">,</span> <span class="token string">'🌷'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> flowers <span class="token operator">=</span> garden<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flowers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* SetIterator {"🌷", "🌹", "🌻"}  */</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flowers<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* {value: "🌷", done: false} */</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flowers<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* {value: "🌷", done: false} */</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flowers<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flowers<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/10/hello-world/"/>
      <url>/2018/09/10/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3>]]></content>
      
      
    </entry>
    
  
  
</search>
